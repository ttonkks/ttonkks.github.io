{"ast":null,"code":"import { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where } from \"firebase/firestore\";\nimport { db } from \"./firebase\";\nimport { v4 as uuidv4 } from 'uuid'; // Імпортуємо uuid для створення унікального id\n\n// Додати нову ціль користувача\nexport const addGoalToFirestore = async (userId, goal) => {\n  try {\n    const goalWithId = {\n      ...goal,\n      id: uuidv4(),\n      userId\n    }; // Генерація унікального id за допомогою uuid\n    const docRef = await addDoc(collection(db, \"goals\"), goalWithId);\n    console.log(\"Ціль додана з id: \", docRef.id); // docRef.id є id документа, згенерованого Firebase\n    return docRef.id; // Повертаємо id для подальшого використання\n  } catch (e) {\n    console.error(\"Помилка додавання цілі: \", e);\n    throw e;\n  }\n};\n\n// Отримати цілі користувача\nexport const fetchGoals = async userId => {\n  try {\n    const q = query(collection(db, \"goals\"), where(\"userId\", \"==\", userId));\n    const querySnapshot = await getDocs(q);\n    const goals = [];\n    querySnapshot.forEach(doc => {\n      goals.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return goals;\n  } catch (e) {\n    console.error(\"Помилка отримання цілей: \", e);\n    throw e;\n  }\n};\n\n// Видалити ціль користувача\n// Видалити ціль користувача\nexport const deleteGoalFromFirestore = async (userId, goalId) => {\n  try {\n    // Перевірка типу goalId, щоб переконатися, що це рядок\n    if (typeof goalId !== 'string') {\n      console.log(\"goalId тип:\", typeof goalId);\n      goalId = String(goalId); // перетворюємо в рядок, якщо це число\n    }\n\n    // Перевірка правильності типу goalId\n    if (typeof goalId !== 'string') {\n      throw new Error(`goalId має бути рядком, а не ${typeof goalId}`);\n    }\n\n    // Логування для перевірки goalId перед видаленням\n    console.log(\"Спроба видалити ціль з goalId:\", goalId);\n\n    // Переконаємось, що goalId не пустий\n    if (!goalId) {\n      throw new Error(\"goalId не може бути порожнім\");\n    }\n\n    // Формуємо правильне посилання на документ\n    const goalRef = doc(db, \"goals\", goalId);\n\n    // Логування для перевірки посилання на документ\n    console.log(\"Посилання на документ для видалення:\", goalRef);\n\n    // Видаляємо документ з Firestore\n    await deleteDoc(goalRef);\n    console.log(`Ціль з goalId ${goalId} була успішно видалена!`);\n  } catch (e) {\n    console.error(\"Помилка при видаленні цілі: \", e);\n    throw e;\n  }\n};\n\n// Оновити статус виконання цілі\n// Оновити статус виконання цілі\nexport const toggleGoalStatus = async (userId, updatedGoal) => {\n  try {\n    // Перевірка на наявність документа перед оновленням\n    const goalRef = doc(db, \"goals\", updatedGoal.id);\n\n    // Логування для перевірки goalId\n    console.log(\"Спроба оновити ціль з goalId:\", updatedGoal.id);\n\n    // Перевірка, чи документ існує\n    const docSnap = await getDoc(goalRef);\n    if (!docSnap.exists()) {\n      throw new Error(`Документ з goalId ${updatedGoal.id} не знайдено в Firestore`);\n    }\n\n    // Оновлюємо статус\n    await updateDoc(goalRef, {\n      completed: updatedGoal.completed\n    });\n    console.log(`Статус цілі з id ${updatedGoal.id} оновлений на ${updatedGoal.completed}`);\n  } catch (e) {\n    console.error(\"Помилка оновлення статусу цілі: \", e);\n    throw e;\n  }\n};","map":{"version":3,"names":["collection","addDoc","getDocs","deleteDoc","doc","updateDoc","query","where","db","v4","uuidv4","addGoalToFirestore","userId","goal","goalWithId","id","docRef","console","log","e","error","fetchGoals","q","querySnapshot","goals","forEach","push","data","deleteGoalFromFirestore","goalId","String","Error","goalRef","toggleGoalStatus","updatedGoal","docSnap","getDoc","exists","completed"],"sources":["/Users/antoninapetrykovych/Desktop/арпорло/ttonkks.githup.io/lab4/src/firebase/firestore.js"],"sourcesContent":["import { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where } from \"firebase/firestore\";\nimport { db } from \"./firebase\";\nimport { v4 as uuidv4 } from 'uuid';  // Імпортуємо uuid для створення унікального id\n\n// Додати нову ціль користувача\nexport const addGoalToFirestore = async (userId, goal) => {\n  try {\n    const goalWithId = { ...goal, id: uuidv4(), userId };  // Генерація унікального id за допомогою uuid\n    const docRef = await addDoc(collection(db, \"goals\"), goalWithId);\n    console.log(\"Ціль додана з id: \", docRef.id);  // docRef.id є id документа, згенерованого Firebase\n    return docRef.id;  // Повертаємо id для подальшого використання\n  } catch (e) {\n    console.error(\"Помилка додавання цілі: \", e);\n    throw e;\n  }\n};\n\n// Отримати цілі користувача\nexport const fetchGoals = async (userId) => {\n  try {\n    const q = query(collection(db, \"goals\"), where(\"userId\", \"==\", userId));\n    const querySnapshot = await getDocs(q);\n    const goals = [];\n    querySnapshot.forEach((doc) => {\n      goals.push({ id: doc.id, ...doc.data() });\n    });\n    return goals;\n  } catch (e) {\n    console.error(\"Помилка отримання цілей: \", e);\n    throw e;\n  }\n};\n\n// Видалити ціль користувача\n// Видалити ціль користувача\nexport const deleteGoalFromFirestore = async (userId, goalId) => {\n    try {\n      // Перевірка типу goalId, щоб переконатися, що це рядок\n      if (typeof goalId !== 'string') {\n        console.log(\"goalId тип:\", typeof goalId);\n        goalId = String(goalId); // перетворюємо в рядок, якщо це число\n      }\n  \n      // Перевірка правильності типу goalId\n      if (typeof goalId !== 'string') {\n        throw new Error(`goalId має бути рядком, а не ${typeof goalId}`);\n      }\n  \n      // Логування для перевірки goalId перед видаленням\n      console.log(\"Спроба видалити ціль з goalId:\", goalId);\n  \n      // Переконаємось, що goalId не пустий\n      if (!goalId) {\n        throw new Error(\"goalId не може бути порожнім\");\n      }\n  \n      // Формуємо правильне посилання на документ\n      const goalRef = doc(db, \"goals\", goalId);\n  \n      // Логування для перевірки посилання на документ\n      console.log(\"Посилання на документ для видалення:\", goalRef);\n  \n      // Видаляємо документ з Firestore\n      await deleteDoc(goalRef);\n      console.log(`Ціль з goalId ${goalId} була успішно видалена!`);\n    } catch (e) {\n      console.error(\"Помилка при видаленні цілі: \", e);\n      throw e;\n    }\n  };\n  \n\n// Оновити статус виконання цілі\n// Оновити статус виконання цілі\nexport const toggleGoalStatus = async (userId, updatedGoal) => {\n    try {\n      // Перевірка на наявність документа перед оновленням\n      const goalRef = doc(db, \"goals\", updatedGoal.id);\n  \n      // Логування для перевірки goalId\n      console.log(\"Спроба оновити ціль з goalId:\", updatedGoal.id);\n  \n      // Перевірка, чи документ існує\n      const docSnap = await getDoc(goalRef);\n      if (!docSnap.exists()) {\n        throw new Error(`Документ з goalId ${updatedGoal.id} не знайдено в Firestore`);\n      }\n  \n      // Оновлюємо статус\n      await updateDoc(goalRef, {\n        completed: updatedGoal.completed,\n      });\n      console.log(`Статус цілі з id ${updatedGoal.id} оновлений на ${updatedGoal.completed}`);\n    } catch (e) {\n      console.error(\"Помилка оновлення статусу цілі: \", e);\n      throw e;\n    }\n  };\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}